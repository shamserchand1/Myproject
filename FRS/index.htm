<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <!-- PWA Meta Tags -->
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#007bff" />
  <link rel="manifest" href="https://shamserchand.com.np/FRS/manifest.json" />
  <link rel="apple-touch-icon" href="https://shamserchand.com.np/FRS/icon.png" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <title>Attendance Dashboard</title>
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet" />
  <!-- Face-api.js -->
  <script defer src="https://shamserchand.com.np/FRS/face-api.min.js"></script>
  
  <style>
    body {
      font-family: "Roboto", sans-serif;
      background: #f8f9fa;
      padding-top: 70px;
      margin-bottom: 60px; /* Reserve space for fixed footer */
    }
    /* Navbar styling */
    .navbar {
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .navbar-brand {
      font-size: 1.75rem;
      font-weight: 700;
    }
    /* Use hamburger (three-bar) icon instead of user icon */
    #accountDropdown {
      font-size: 2rem;
    }
    /* Install Modal styles */
    .modal-install .modal-content {
      border-radius: 10px;
      padding: 20px;
    }
    /* Fixed Footer */
    footer {
      position: fixed;
      bottom: 0;
      width: 100%;
      z-index: 999;
    }
    /* Dropdown styling */
    .dropdown {
      position: relative;
    }
    .dropdown-toggle::after {
      display: none;
    }
    .dropdown-menu {
      min-width: 300px;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.15);
      position: absolute;
      top: 60px;
      right: 0;
    }
    .dropdown-menu::before {
      content: "";
      position: absolute;
      top: -10px;
      right: 16px;
      border-width: 0 10px 10px;
      border-style: solid;
      border-color: transparent transparent #fff transparent;
    }
    .dropdown-menu input[readonly] {
      background-color: #e9ecef;
      cursor: pointer;
    }
    .dropdown-menu .btn {
      font-size: 0.9rem;
    }
    /* Attendance Modal Styles */
    #media-container {
      position: relative;
      width: 320px;
      height: 240px;
      margin: auto;
      border: 1px solid #ccc;
      border-radius: 8px;
      overflow: hidden;
    }
    #attendance-video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transform: scaleX(-1);
    }
    #captured-face {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: none;
    }
    /* Attendance Table Styles */
    #attendance-table {
      margin-top: 30px;
    }
    /* Pagination Controls */
    #attendance-pagination {
      margin-top: 15px;
    }
  </style>
  
  <script type="module">
    // Import Firebase modules
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.3.1/firebase-app.js";
    import {
      getAuth,
      signInWithPopup,
      GoogleAuthProvider,
      signOut,
      onAuthStateChanged,
    } from "https://www.gstatic.com/firebasejs/11.3.1/firebase-auth.js";
    import {
      getFirestore,
      doc,
      getDoc,
      updateDoc,
      setDoc,
      addDoc,
      serverTimestamp,
      collection,
      getDocs,
      query,
      where
    } from "https://www.gstatic.com/firebasejs/11.3.1/firebase-firestore.js";

    // Firebase configuration â€“ replace with your own config
    const firebaseConfig = {
      apiKey: "AIzaSyDaP0RQUOSXRiIVaf3u-wrBE0ck_pt8OxY",
      authDomain: "axons-fd4e8.firebaseapp.com",
      databaseURL: "https://axons-fd4e8.firebaseio.com",
      projectId: "axons-fd4e8",
      storageBucket: "axons-fd4e8.firebasestorage.app",
      messagingSenderId: "54666268712",
      appId: "1:54666268712:web:d59a7d13a4ebed3e5e251d"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);
    const provider = new GoogleAuthProvider();
    let currentUser = null; // Holds authenticated user
    let storedFaceDescriptor = null; // Loaded from profile

    // Global array for attendance records and pagination variables.
    let attendanceRecords = [];
    const recordsPerPage = 10;
    let currentPage = 1;

    // Load face-api.js models from https://shamserchand.com.np/FRS/models folder.
    async function loadFaceApiModels() {
      await faceapi.nets.ssdMobilenetv1.loadFromUri("https://shamserchand.com.np/FRS/models");
      await faceapi.nets.faceLandmark68Net.loadFromUri("https://shamserchand.com.np/FRS/models");
      await faceapi.nets.faceRecognitionNet.loadFromUri("https://shamserchand.com.np/FRS/models");
      console.log("Face-api models loaded.");
    }
    loadFaceApiModels();

    // Load user's profile and update UI.
    async function loadProfile(user) {
      const userRef = doc(db, "users", user.uid);
      const userSnap = await getDoc(userRef);
      if (userSnap.exists()) {
        const data = userSnap.data();
        document.getElementById("profile-name").value = data.name || "";
        document.getElementById("profile-employee").value = data.employeeId || "";
        document.getElementById("profile-mobile").value = data.mobileNumber || "";
        const enrollBox = document.getElementById("face-enroll-status");
        if (data.faceDescriptor) {
          enrollBox.value = "Face successfully enrolled";
          storedFaceDescriptor = data.faceDescriptor;
        } else {
          enrollBox.value = "Click to enroll face";
          storedFaceDescriptor = null;
        }
      }
    }

    // Update a field in Firestore.
    async function updateField(fieldName, newValue) {
      if (currentUser) {
        const userRef = doc(db, "users", currentUser.uid);
        await updateDoc(userRef, { [fieldName]: newValue });
      }
    }

    // Toggle edit mode.
    async function toggleEditField(e, inputElement, buttonElement, fieldName) {
      e.stopPropagation();
      if (inputElement.hasAttribute("readonly")) {
        inputElement.removeAttribute("readonly");
        inputElement.focus();
        buttonElement.innerHTML = '<i class="fas fa-check"></i>';
      } else {
        await updateField(fieldName, inputElement.value);
        inputElement.setAttribute("readonly", true);
        buttonElement.innerHTML = '<i class="fas fa-pencil-alt"></i>';
      }
    }

    // Euclidean distance helper.
    function euclideanDistance(arr1, arr2) {
      let sum = 0;
      for (let i = 0; i < arr1.length; i++) {
        sum += Math.pow(arr1[i] - arr2[i], 2);
      }
      return Math.sqrt(sum);
    }
    const THRESHOLD = 0.6;

    // Attendance functions.
    let videoStream = null;
    async function startCamera() {
      const video = document.getElementById("attendance-video");
      try {
        videoStream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = videoStream;
        await video.play();
      } catch (error) {
        console.error("Error accessing camera: ", error);
        document.getElementById("attendance-message").textContent = "Error accessing camera.";
      }
    }

    function stopCamera() {
      const video = document.getElementById("attendance-video");
      if (videoStream) {
        videoStream.getTracks().forEach((track) => track.stop());
      }
      video.srcObject = null;
    }

    // Mark attendance only if not marked within the last 5 minutes.
    async function markAttendance() {
      if (!currentUser) return;
      try {
        const attendanceQuery = query(collection(db, "attendance"), where("userId", "==", currentUser.uid));
        const querySnapshot = await getDocs(attendanceQuery);
        let lastTimestamp = 0;
        querySnapshot.forEach((docSnap) => {
          const data = docSnap.data();
          if (data.timestamp) {
            const ts = data.timestamp.toMillis();
            if (ts > lastTimestamp) {
              lastTimestamp = ts;
            }
          }
        });
        const now = Date.now();
        if (lastTimestamp !== 0 && (now - lastTimestamp) < 5 * 60 * 1000) {
          document.getElementById("attendance-message").textContent = "Attendance already marked in the last 5 minutes.";
          return;
        }
        await addDoc(collection(db, "attendance"), {
          userId: currentUser.uid,
          employeeId: document.getElementById("profile-employee").value,
          name: document.getElementById("profile-name").value,
          timestamp: serverTimestamp(),
          status: "present"
        });
        document.getElementById("attendance-message").textContent = "Attendance marked successfully!";
        loadAttendanceRecords();
      } catch (error) {
        console.error("Error marking attendance: ", error);
        document.getElementById("attendance-message").textContent = "Error marking attendance.";
      }
    }

    // Auto capture and process frame.
    async function autoCaptureAndProcess() {
      const video = document.getElementById("attendance-video");
      const messageElem = document.getElementById("attendance-message");
      messageElem.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Scanning...';

      const canvas = document.createElement("canvas");
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const context = canvas.getContext("2d");
      context.translate(canvas.width, 0);
      context.scale(-1, 1);
      context.drawImage(video, 0, 0, canvas.width, canvas.height);

      const detection = await faceapi.detectSingleFace(canvas).withFaceLandmarks().withFaceDescriptor();
      if (detection && detection.descriptor) {
        const capturedDescriptor = Array.from(detection.descriptor);
        if (!storedFaceDescriptor) {
          messageElem.textContent = "No enrolled face found in your profile.";
          return;
        }
        const distance = euclideanDistance(capturedDescriptor, storedFaceDescriptor);
        if (distance < THRESHOLD) {
          messageElem.textContent = "Face matched! Marking attendance...";
          stopCamera();
          const mediaContainer = document.getElementById("media-container");
          mediaContainer.style.backgroundImage = `url(${canvas.toDataURL("image/png")})`;
          mediaContainer.style.backgroundSize = "cover";
          document.getElementById("attendance-video").style.display = "none";
          await markAttendance();
        } else {
          messageElem.textContent = "Face mismatch. Attendance not marked.";
        }
      } else {
        messageElem.textContent = "No face detected. Please try again.";
      }
    }

    // Pagination functions.
    function displayAttendancePage(page) {
      currentPage = page;
      const tableBody = document.getElementById("attendance-table-body");
      tableBody.innerHTML = "";
      const startIndex = (page - 1) * recordsPerPage;
      const endIndex = startIndex + recordsPerPage;
      const pageRecords = attendanceRecords.slice(startIndex, endIndex);
      if (pageRecords.length === 0) {
        const tr = document.createElement("tr");
        tr.innerHTML = `<td colspan="6" class="text-center">No attendance records found.</td>`;
        tableBody.appendChild(tr);
      } else {
        let srNo = startIndex + 1;
        pageRecords.forEach((data) => {
          const ts = data.timestamp ? data.timestamp.toDate() : new Date();
          const tr = document.createElement("tr");
          tr.innerHTML = `
            <td>${srNo++}</td>
            <td>${ts.toLocaleDateString()}</td>
            <td>${data.employeeId || ""}</td>
            <td>${data.name || ""}</td>
            <td>${ts.toLocaleTimeString()}</td>
            <td>${data.status || ""}</td>
          `;
          tableBody.appendChild(tr);
        });
      }
      updatePaginationControls();
    }

    function updatePaginationControls() {
      const paginationContainer = document.getElementById("attendance-pagination");
      paginationContainer.innerHTML = "";
      const totalPages = Math.ceil(attendanceRecords.length / recordsPerPage);
      if (totalPages <= 1) return;

      const prevBtn = document.createElement("button");
      prevBtn.className = "btn btn-secondary btn-sm me-2";
      prevBtn.innerHTML = '<i class="fas fa-chevron-left"></i>';
      prevBtn.disabled = currentPage === 1;
      prevBtn.addEventListener("click", () => {
        if (currentPage > 1) displayAttendancePage(currentPage - 1);
      });
      paginationContainer.appendChild(prevBtn);

      for (let i = 1; i <= totalPages; i++) {
        const pageBtn = document.createElement("button");
        pageBtn.className = "btn btn-outline-secondary btn-sm me-2";
        pageBtn.textContent = i;
        if (i === currentPage) {
          pageBtn.classList.remove("btn-outline-secondary");
          pageBtn.classList.add("btn-secondary");
        }
        pageBtn.addEventListener("click", () => {
          displayAttendancePage(i);
        });
        paginationContainer.appendChild(pageBtn);
      }

      const nextBtn = document.createElement("button");
      nextBtn.className = "btn btn-secondary btn-sm";
      nextBtn.innerHTML = '<i class="fas fa-chevron-right"></i>';
      nextBtn.disabled = currentPage === totalPages;
      nextBtn.addEventListener("click", () => {
        if (currentPage < totalPages) displayAttendancePage(currentPage + 1);
      });
      paginationContainer.appendChild(nextBtn);
    }

    async function loadAttendanceRecords() {
      const tableBody = document.getElementById("attendance-table-body");
      tableBody.innerHTML = "";
      if (!currentUser) return;
      try {
        const q = query(collection(db, "attendance"), where("userId", "==", currentUser.uid));
        const querySnapshot = await getDocs(q);
        attendanceRecords = [];
        querySnapshot.forEach((docSnap) => {
          const data = docSnap.data();
          attendanceRecords.push(data);
        });
        attendanceRecords.sort((a, b) => {
          const aTs = a.timestamp ? a.timestamp.toMillis() : 0;
          const bTs = b.timestamp ? b.timestamp.toMillis() : 0;
          return bTs - aTs;
        });
        displayAttendancePage(1);
      } catch (error) {
        console.error("Error loading attendance records:", error);
        tableBody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Error loading records.</td></tr>`;
      }
    }

    // PWA Install Modal logic.
    let deferredPrompt;
    window.addEventListener("beforeinstallprompt", (e) => {
      e.preventDefault();
      deferredPrompt = e;
      const installModal = new bootstrap.Modal(document.getElementById("installModal"));
      installModal.show();
    });

    function handleInstallChoice(choice) {
      if (choice === "install" && deferredPrompt) {
        deferredPrompt.prompt();
        deferredPrompt.userChoice.then((result) => {
          console.log("User choice:", result.outcome);
          deferredPrompt = null;
          const installModal = bootstrap.Modal.getInstance(document.getElementById("installModal"));
          installModal.hide();
        });
      } else {
        const installModal = bootstrap.Modal.getInstance(document.getElementById("installModal"));
        installModal.hide();
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      // Register service worker.
      if ("serviceWorker" in navigator) {
        window.addEventListener("load", () => {
          navigator.serviceWorker.register("https://shamserchand.com.np/FRS/sw.js").then(
            (registration) => {
              console.log("ServiceWorker registration successful with scope:", registration.scope);
            },
            (err) => {
              console.log("ServiceWorker registration failed:", err);
            }
          );
        });
      }

      // Profile elements.
      const loginBtn = document.getElementById("login-btn");
      const logoutBtn = document.getElementById("logout-btn");
      const profileNameInput = document.getElementById("profile-name");
      const profileEmployeeInput = document.getElementById("profile-employee");
      const profileMobileInput = document.getElementById("profile-mobile");
      const editNameBtn = document.getElementById("edit-name");
      const editEmployeeBtn = document.getElementById("edit-employee");
      const editMobileBtn = document.getElementById("edit-mobile");
      const enrollBox = document.getElementById("face-enroll-status");
      const faceImageUpload = document.getElementById("face-image-upload");
      const faceStatus = document.getElementById("face-status");
      const attendanceBtn = document.getElementById("attendance-btn");

      enrollBox.addEventListener("click", () => {
        if (enrollBox.value === "Face successfully enrolled") {
          faceStatus.textContent = "Face already enrolled";
          return;
        }
        faceImageUpload.click();
      });

      faceImageUpload.addEventListener("change", async (e) => {
        const file = e.target.files[0];
        if (!file) return;
        faceStatus.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Processing...';
        const img = new Image();
        img.src = URL.createObjectURL(file);
        img.onload = async () => {
          const detection = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor();
          if (detection) {
            const descriptorArray = Array.from(detection.descriptor);
            const userRef = doc(db, "users", currentUser.uid);
            await updateDoc(userRef, { faceDescriptor: descriptorArray });
            enrollBox.value = "Face successfully enrolled";
            faceStatus.textContent = "Face successfully enrolled";
            storedFaceDescriptor = descriptorArray;
          } else {
            enrollBox.value = "Click to enroll face";
            faceStatus.textContent = "No face detected. Please try again.";
          }
        };
      });

      loginBtn.addEventListener("click", () => {
        signInWithPopup(auth, provider)
          .then(async (result) => {
            currentUser = result.user;
            const userRef = doc(db, "users", currentUser.uid);
            const userSnap = await getDoc(userRef);
            if (!userSnap.exists()) {
              await setDoc(userRef, {
                name: currentUser.displayName,
                employeeId: "",
                mobileNumber: "",
                email: currentUser.email,
                createdAt: serverTimestamp(),
              });
            }
            await loadProfile(currentUser);
            loginBtn.style.display = "none";
            logoutBtn.style.display = "inline-block";
            attendanceBtn.disabled = false;
            loadAttendanceRecords();
          })
          .catch((error) => console.error("Login error:", error));
      });

      logoutBtn.addEventListener("click", () => {
        signOut(auth)
          .then(() => {
            currentUser = null;
            profileNameInput.value = "";
            profileEmployeeInput.value = "";
            profileMobileInput.value = "";
            enrollBox.value = "Click to enroll face";
            faceStatus.textContent = "";
            loginBtn.style.display = "inline-block";
            logoutBtn.style.display = "none";
            attendanceBtn.disabled = true;
            document.getElementById("attendance-table-body").innerHTML = "";
            document.getElementById("attendance-pagination").innerHTML = "";
